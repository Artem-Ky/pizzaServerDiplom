// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using pizzaServerApp.Models;

#nullable disable

namespace pizzaServerApp.Migrations
{
    [DbContext(typeof(PizzaWebAppContext))]
    partial class PizzaWebAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "public");

                    b.HasData(
                        new
                        {
                            Id = "f805e1d9-a369-4216-b731-beea8fdaa75b",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "15cd6f21-3c7b-4bef-a152-d9d22e73aaed",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "public");
                });

            modelBuilder.Entity("pizzaServerApp.Models.BannerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("bannerType", "public");
                });

            modelBuilder.Entity("pizzaServerApp.Models.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("Discont")
                        .HasColumnType("smallint")
                        .HasColumnName("discont");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("endDate");

                    b.Property<bool>("IsPersent")
                        .HasColumnType("boolean")
                        .HasColumnName("isPersent");

                    b.Property<short>("MinCost")
                        .HasColumnType("smallint")
                        .HasColumnName("minCost");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("startDate");

                    b.HasKey("Id");

                    b.ToTable("coupon", "public");
                });

            modelBuilder.Entity("pizzaServerApp.Models.Courier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.ToTable("courier", "public");
                });

            modelBuilder.Entity("pizzaServerApp.Models.DefaultProductComboProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ComboProductId")
                        .HasColumnType("integer")
                        .HasColumnName("comboProductId");

                    b.Property<int>("DefaultProductId")
                        .HasColumnType("integer")
                        .HasColumnName("defaultProductId");

                    b.HasKey("Id");

                    b.HasIndex("ComboProductId");

                    b.HasIndex("DefaultProductId");

                    b.ToTable("defaultProduct_comboProduct", "public");
                });

            modelBuilder.Entity("pizzaServerApp.Models.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CostForOne")
                        .HasColumnType("integer")
                        .HasColumnName("costForOne");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<int>("IngredientTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("ingredientTypeId");

                    b.Property<bool>("IsAvailible")
                        .HasColumnType("boolean")
                        .HasColumnName("isAvailible");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("photo");

                    b.Property<int>("WeightForOne")
                        .HasColumnType("integer")
                        .HasColumnName("weightForOne");

                    b.HasKey("Id");

                    b.HasIndex("IngredientTypeId");

                    b.ToTable("ingredient", "public");
                });

            modelBuilder.Entity("pizzaServerApp.Models.IngredientCustomProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Cost")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("cost");

                    b.Property<int?>("Count")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<int>("CustomProductId")
                        .HasColumnType("integer")
                        .HasColumnName("customProductId");

                    b.Property<int>("IngredientId")
                        .HasColumnType("integer")
                        .HasColumnName("ingredientId");

                    b.HasKey("Id");

                    b.HasIndex("CustomProductId");

                    b.HasIndex("IngredientId");

                    b.ToTable("ingredient_customProduct", "public");
                });

            modelBuilder.Entity("pizzaServerApp.Models.IngredientType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("ingredientType", "public");
                });

            modelBuilder.Entity("pizzaServerApp.Models.OrderProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Cost")
                        .HasColumnType("integer")
                        .HasColumnName("cost");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("orderId");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("productId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("order_product", "public");
                });

            modelBuilder.Entity("pizzaServerApp.Models.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("orderStatus", "public");
                });

            modelBuilder.Entity("pizzaServerApp.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .HasColumnType("text")
                        .HasColumnName("about");

                    b.Property<int>("Cost")
                        .HasColumnType("integer")
                        .HasColumnName("cost");

                    b.Property<string>("Descr")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descr");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("productTypeId");

                    b.Property<int>("Weight")
                        .HasColumnType("integer")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("product", "public");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("pizzaServerApp.Models.ProductSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("size");

                    b.HasKey("Id");

                    b.ToTable("productSize", "public");
                });

            modelBuilder.Entity("pizzaServerApp.Models.ProductToping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Cost")
                        .HasColumnType("integer")
                        .HasColumnName("cost");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<int>("OrderProductId")
                        .HasColumnType("integer")
                        .HasColumnName("order_productId");

                    b.Property<int>("TopingId")
                        .HasColumnType("integer")
                        .HasColumnName("topingId");

                    b.HasKey("Id");

                    b.HasIndex("OrderProductId");

                    b.HasIndex("TopingId");

                    b.ToTable("product_toping", "public");
                });

            modelBuilder.Entity("pizzaServerApp.Models.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("productType", "public");
                });

            modelBuilder.Entity("pizzaServerApp.Models.Toping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IngredientId")
                        .HasColumnType("integer")
                        .HasColumnName("ingredientId");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.ToTable("toping", "public");
                });

            modelBuilder.Entity("pizzaServerApp.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", "public");
                });

            modelBuilder.Entity("pizzaServerApp.Models.UserCoupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CouponId")
                        .HasColumnType("integer")
                        .HasColumnName("couponId");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("UserId");

                    b.ToTable("user_coupon", "public");
                });

            modelBuilder.Entity("pizzaServerApp.Models.UserOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<int>("CouponId")
                        .HasColumnType("integer")
                        .HasColumnName("couponId");

                    b.Property<int>("CourierId")
                        .HasColumnType("integer")
                        .HasColumnName("courierId");

                    b.Property<TimeOnly>("OrderDeliveryTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("orderDeliveryTime");

                    b.Property<TimeOnly>("OrderEndTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("orderEndTime");

                    b.Property<TimeOnly>("OrderStartTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("orderStartTime");

                    b.Property<TimeOnly>("OrderTotalTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("orderTotalTime");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("statusId");

                    b.Property<int>("TotalCost")
                        .HasColumnType("integer")
                        .HasColumnName("totalCost");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("CourierId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("userOrder", "public");
                });

            modelBuilder.Entity("pizzaServerApp.Models.ComboProduct", b =>
                {
                    b.HasBaseType("pizzaServerApp.Models.Product");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("photo");

                    b.ToTable("comboProduct", "public");
                });

            modelBuilder.Entity("pizzaServerApp.Models.CustomProduct", b =>
                {
                    b.HasBaseType("pizzaServerApp.Models.Product");

                    b.Property<string>("IngredientHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ingredientHash");

                    b.ToTable("customProduct", "public");
                });

            modelBuilder.Entity("pizzaServerApp.Models.DefaultProduct", b =>
                {
                    b.HasBaseType("pizzaServerApp.Models.Product");

                    b.Property<int>("BannerTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("bannerTypeId");

                    b.Property<bool>("IsAvailible")
                        .HasColumnType("boolean")
                        .HasColumnName("isAvailible");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("photo");

                    b.Property<int>("SizeProductId")
                        .HasColumnType("integer")
                        .HasColumnName("sizeProductId");

                    b.HasIndex("BannerTypeId");

                    b.HasIndex("SizeProductId");

                    b.ToTable("defaultProduct", "public");
                });

            modelBuilder.Entity("pizzaServerApp.Models.TwoHalfPizza", b =>
                {
                    b.HasBaseType("pizzaServerApp.Models.Product");

                    b.Property<int>("FirstPizzaId")
                        .HasColumnType("integer")
                        .HasColumnName("firstPizzaId");

                    b.Property<int>("SecondPizzaId")
                        .HasColumnType("integer")
                        .HasColumnName("secondPizzaId");

                    b.Property<int>("SizeProductId")
                        .HasColumnType("integer")
                        .HasColumnName("sizeProductId");

                    b.Property<string>("TwoHalfPizzaHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("twoHalfPizzaHash");

                    b.HasIndex("SizeProductId");

                    b.ToTable("twoHalfPizza", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("pizzaServerApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("pizzaServerApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pizzaServerApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("pizzaServerApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("pizzaServerApp.Models.DefaultProductComboProduct", b =>
                {
                    b.HasOne("pizzaServerApp.Models.ComboProduct", "ComboProduct")
                        .WithMany()
                        .HasForeignKey("ComboProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pizzaServerApp.Models.DefaultProduct", "DefaultProduct")
                        .WithMany()
                        .HasForeignKey("DefaultProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComboProduct");

                    b.Navigation("DefaultProduct");
                });

            modelBuilder.Entity("pizzaServerApp.Models.Ingredient", b =>
                {
                    b.HasOne("pizzaServerApp.Models.IngredientType", "IngredientType")
                        .WithMany()
                        .HasForeignKey("IngredientTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IngredientType");
                });

            modelBuilder.Entity("pizzaServerApp.Models.IngredientCustomProduct", b =>
                {
                    b.HasOne("pizzaServerApp.Models.CustomProduct", "CustomProduct")
                        .WithMany()
                        .HasForeignKey("CustomProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pizzaServerApp.Models.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomProduct");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("pizzaServerApp.Models.OrderProduct", b =>
                {
                    b.HasOne("pizzaServerApp.Models.UserOrder", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("pizzaServerApp.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("pizzaServerApp.Models.Product", b =>
                {
                    b.HasOne("pizzaServerApp.Models.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("pizzaServerApp.Models.ProductToping", b =>
                {
                    b.HasOne("pizzaServerApp.Models.OrderProduct", "OrderProduct")
                        .WithMany()
                        .HasForeignKey("OrderProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pizzaServerApp.Models.Toping", "Toping")
                        .WithMany()
                        .HasForeignKey("TopingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderProduct");

                    b.Navigation("Toping");
                });

            modelBuilder.Entity("pizzaServerApp.Models.Toping", b =>
                {
                    b.HasOne("pizzaServerApp.Models.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("pizzaServerApp.Models.UserCoupon", b =>
                {
                    b.HasOne("pizzaServerApp.Models.Coupon", "Coupon")
                        .WithMany()
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pizzaServerApp.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("pizzaServerApp.Models.UserOrder", b =>
                {
                    b.HasOne("pizzaServerApp.Models.Coupon", "Coupon")
                        .WithMany()
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pizzaServerApp.Models.Courier", "Courier")
                        .WithMany()
                        .HasForeignKey("CourierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pizzaServerApp.Models.OrderStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pizzaServerApp.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("Courier");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("pizzaServerApp.Models.ComboProduct", b =>
                {
                    b.HasOne("pizzaServerApp.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("pizzaServerApp.Models.ComboProduct", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("pizzaServerApp.Models.CustomProduct", b =>
                {
                    b.HasOne("pizzaServerApp.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("pizzaServerApp.Models.CustomProduct", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("pizzaServerApp.Models.DefaultProduct", b =>
                {
                    b.HasOne("pizzaServerApp.Models.BannerType", "BannerType")
                        .WithMany()
                        .HasForeignKey("BannerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pizzaServerApp.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("pizzaServerApp.Models.DefaultProduct", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pizzaServerApp.Models.ProductSize", "SizeProduct")
                        .WithMany()
                        .HasForeignKey("SizeProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BannerType");

                    b.Navigation("SizeProduct");
                });

            modelBuilder.Entity("pizzaServerApp.Models.TwoHalfPizza", b =>
                {
                    b.HasOne("pizzaServerApp.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("pizzaServerApp.Models.TwoHalfPizza", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pizzaServerApp.Models.ProductSize", "SizeProduct")
                        .WithMany()
                        .HasForeignKey("SizeProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SizeProduct");
                });
#pragma warning restore 612, 618
        }
    }
}
